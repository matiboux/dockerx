#!/bin/sh

# DockerX (v0.1.0)
# Wrapper for running docker programs & docker shell environments.
# https://github.com/matiboux/dockerx
# MIT License
# Copyright (c) 2024 Matiboux
# This project is not affiliated with Docker, Inc.

VERSION='0.1.0'

ERROR_CODE=''

# Parse arguments
# Dummy while loop to allow breaking
while true; do

	# Parse options arguments
	while [ "$#" -gt 0 ]; do

		case "$1" in

			'--help' | '-h' )
				# Print general help
				DOCKERX_PRINT_HELP='true'
				shift
				;;

			'--version' | '-v' )
				# Print version
				DOCKERX_PRINT_VERSION='true'
				shift
				;;

			'--dry-run' | '-n' )
				# Dry run, print docker command without running it
				DOCKERX_DRY_RUN='true'
				shift
				;;

			'--quiet' | '-q' )
				# Quiet, do not print docker command
				DOCKERX_QUIET='true'
				shift
				;;

			'--update' )
				# Update DockerX
				DOCKERX_UPDATE='true'
				shift
				;;

			'--install-dir' | '-i' )
				shift
				# Check for installation directory argument
				if [ -z "$1" ]; then
					echo 'Error: Missing installation directory.' >&2
					DOCKERX_PRINT_HELP='true'
					DOCKERX_UPDATE='true'
					ERROR_CODE=1
					break
				fi
				# Set installation directory
				DOCKERX_INSTALL_DIR="$1"
				shift
				;;

			'--get-context' | '-g' | '-c' )
				# Get context path
				DOCKERX_CONTEXT_GET=true
				shift
				;;

			'--set-context' | '-s' | '-C' )
				# Set context path
				DOCKERX_CONTEXT_SET=true
				shift
				if [ $# -gt 0 ] && [ "$(echo "$1" | cut -c1)" != '-' ]; then
					DOCKERX_CONTEXT_NEW_PATH="$1"
					shift
				fi
				;;

			'--reset-context' | '-r' )
				# Unset context path
				DOCKERX_CONTEXT_SET=true
				DOCKERX_CONTEXT_NEW_PATH='null'
				shift
				;;

			* )
				break
				;;

		esac

	done

	if
		[ "$DOCKERX_PRINT_HELP" = 'true' ] ||
		[ "$DOCKERX_PRINT_VERSION" = 'true' ] ||
		[ "$DOCKERX_UPDATE" = 'true' ] ||
		[ "$DOCKERX_CONTEXT_GET" = 'true' ] ||
		[ "$DOCKERX_CONTEXT_SET" = 'true' ]
	then
		# Stop parsing arguments
		break
	fi

	# Parse first mandatory positional argument

	if [ "$#" -le 0 ] || [ -z "$1" ]; then
		echo 'Error: No image specified.' >&2
		DOCKERX_PRINT_HELP='true'
		ERROR_CODE=1
		break
	fi

	if [ "$1" = '?' ]; then
		# Print general help
		DOCKERX_PRINT_HELP='true'
		shift
		# Stop parsing arguments
		break
	fi

	if [ "$1" = 'dockerc' ]; then
		# Run dockerc command
		DOCKERX_RUN_DOCKERC='true'
		shift

	elif [ "$DOCKERX_UPDATE" = 'true' ]; then
		# Parse update install tag argument
		DOCKERX_INSTALL_TAG="$1"
		shift

	else
		# Parse image argument
		DOCKERX_IMAGE="$1"
		shift
	fi

	if [ -z "$DOCKERX_IMAGE" ]; then
		# Stop parsing arguments
		break
	fi

	# Check for optional positional arguments

	if [ "$#" -le 0 ]; then
		# No more arguments
		break
	fi

	# Parse docker options

	PARSE_OPTIONS=''
	PARSE_OPTIONS_COUNT=0
	PARSE_OPTIONS_FOUND='false'

	for ARG in "$@"; do

		if [ "$ARG" = '--' ]; then
			# Found docker options separator
			PARSE_OPTIONS_FOUND=true
			break
		fi

		if [ -z "$ARG" ]; then
			# Empty argument
			ARG="''"
		elif [ "$(echo "$ARG" | grep "[ '\"\$\`;*&#<>|]")" ]; then
			# Escape argument with spaces or special shell characters
			# Replace single quotes with escaped single quotes
			ARG="'$(echo "$ARG" | sed "s/'/'\"'\"'/g")'"
		fi

		PARSE_OPTIONS="$PARSE_OPTIONS $ARG"
		PARSE_OPTIONS_COUNT=$((PARSE_OPTIONS_COUNT + 1))

	done

	if [ "$PARSE_OPTIONS_FOUND" = 'true' ]; then
		# Docker options found
		while [ "$PARSE_OPTIONS_COUNT" -gt 0 ]; do
			# Shift docker options from arguments
			shift
			PARSE_OPTIONS_COUNT=$((PARSE_OPTIONS_COUNT - 1))
		done
		# Shift '--' separator from arguments
		shift
		# Save parsed docker options
		DOCKERX_DOCKER_OPTIONS="$PARSE_OPTIONS"
	fi

	if [ "$#" -le 0 ]; then
		# No more arguments
		break
	fi

	# Parse docker command preset
	if [ "$(echo "$1" | cut -c1)" = '@' ]; then
		if [ "$1" = '@' ]; then
			# Print docker command preset help
			DOCKERX_PRINT_HELP_PRESET='true'
			# Stop parsing arguments
			break
		fi

		DOCKERX_DOCKER_PRESET="$1"
		shift
	fi

	# Check for optional positional arguments
	if [ "$#" -le 0 ]; then
		# No more arguments
		break
	fi

	# Parse trailing positional arguments
	# Parse command args
	DOCKERX_COMMAND_ARGS=''
	for ARG in "$@"; do

		if [ -z "$ARG" ]; then
			# Empty argument
			ARG="''"
		elif [ "$(echo "$ARG" | grep "[ '\"\$\`;*&#<>|]")" ]; then
			# Escape argument with spaces or special shell characters
			# Replace single quotes with escaped single quotes
			ARG="'$(echo "$ARG" | sed "s/'/'\"'\"'/g")'"
		fi

		DOCKERX_COMMAND_ARGS="$DOCKERX_COMMAND_ARGS $ARG"

	done

	# Remove leading space
	DOCKERX_COMMAND_ARGS="${DOCKERX_COMMAND_ARGS# }"

	# Stop parsing arguments
	break

done

DRY_RUN='false'
if [ -n "$DOCKERX_DRY_RUN" ]; then
	# Use from argument or environment variable
	DRY_RUN="$DOCKERX_DRY_RUN"
fi

QUIET='false'
if [ -n "$DOCKERX_QUIET" ]; then
	# Use from argument or environment variable
	QUIET="$DOCKERX_QUIET"
fi

UPDATE='false'
if [ -n "$DOCKERX_UPDATE" ]; then
	# Use from argument or environment variable
	UPDATE="$DOCKERX_UPDATE"
fi

INSTALL_DIR="$(dirname "$0")"
if [ -n "$DOCKERX_INSTALL_DIR" ]; then
	# Use from argument or environment variable
	INSTALL_DIR="$DOCKERX_INSTALL_DIR"
fi

INSTALL_TAG=''
if [ -n "$DOCKERX_INSTALL_TAG" ]; then
	# Use from argument or environment variable
	INSTALL_TAG="$DOCKERX_INSTALL_TAG"
fi

CONTEXT_GET=''
if [ -n "$DOCKERX_CONTEXT_GET" ]; then
	# Use from argument or environment variable
	CONTEXT_GET="$DOCKERX_CONTEXT_GET"
fi

CONTEXT_SET=''
if [ -n "$DOCKERX_CONTEXT_SET" ]; then
	# Use from argument or environment variable
	CONTEXT_SET="$DOCKERX_CONTEXT_SET"
fi

CONTEXT_NEW_PATH=''
if [ -n "$DOCKERX_CONTEXT_NEW_PATH" ]; then
	# Use from argument or environment variable
	CONTEXT_NEW_PATH="$DOCKERX_CONTEXT_NEW_PATH"
fi

COMMAND_ARGS=''
if [ -n "$DOCKERX_COMMAND_ARGS" ]; then
	# Use from argument or environment variable
	COMMAND_ARGS="$DOCKERX_COMMAND_ARGS"
fi

if [ "$DOCKERX_PRINT_HELP" = 'true' ]; then

	if [ "$UPDATE" = 'true' ]; then
		# Print update help & exit
		echo "Usage: $0 --update [options] [tag]"
		echo ''
		echo 'Options:'
		echo '  -h, --help         Print this help message'
		echo '  -i, --install-dir  Set installation directory'
		echo "    (defaults to directory '$(dirname "$0")')"
		echo ''
		echo 'Arguments:'
		echo '  tag  DockerX tag/version to install (defaults to HEAD)'
		exit ${ERROR_CODE:-0}
	fi

	# Print help & exit
	echo 'Usage:'
	echo "  $0 [options] <image> [ [...docker_options] -- ] [...command]"
	echo "  $0 [options] <image> [ [...docker_options] -- ] [@preset] [...args]"
	echo "  $0 --set-context [path]"
	echo ''
	echo 'DockerX will run the specified docker image in the context of your'
	echo 'working directory. '
	echo ''
	echo 'Arguments:'
	echo '  options: DockerX options'
	echo '  image: Docker image to run'
	echo '  docker_options: Options passed to docker run command'
	echo '  command: Command to run in the container'
	echo '  @preset: DockerX preset (shortcut for a command)'
	echo '  args: Arguments appended to the preset command'
	echo ''
	echo 'Arguments details:'
	echo '  options:'
	echo '    -h, --help           Print this help and exit'
	echo '    -v, --version        Print version and exit'
	echo '    --update             Update DockerX and exit'
	echo '    -g, --get-context    Get the DockerX context path'
	echo '    -c, --set-context    Set the DockerX context path'
	echo '    -r, --reset-context  Unset the DockerX context path'
	echo '    -n, --dry-run        Dry run, print docker command without running it'
	echo '    -q, --quiet          Quiet, do not print docker command'
	echo '  @preset: One of the following:'
	echo '    $, @sh  Run a `sh` shell in the container'
	exit ${ERROR_CODE:-0}
fi

# Function to get latest version
get_latest_version() {
	# Syntax: '"tag_name": "v1.0.0",'
	LATEST_VERSION_JSON=$(
		curl -fsSL "https://api.github.com/repos/matiboux/dockerx/releases/latest" 2>/dev/null \
		| grep -Eo '"tag_name": "(.+?)",'
	)

	if [ -n "$LATEST_VERSION_JSON" ]; then
		if [ "$(uname -s)" = 'Darwin' ]; then
			# MacOS
			LATEST_VERSION="${LATEST_VERSION_JSON:14:$((${#LATEST_VERSION_JSON}-14-2))}"
		else
			# Linux
			LATEST_VERSION=$(expr substr "$LATEST_VERSION_JSON" $(expr 1 + 14) $(expr length "$LATEST_VERSION_JSON" - 14 - 2))
		fi

		echo "$LATEST_VERSION"
	fi
}

if [ "$PRINT_VERSION" = true ]; then

	# Print version and exit
	if [ "$QUIET" = false ]; then
		echo "DockerX (v$VERSION) - https://github.com/matiboux/dockerx"

		if [ "$DRY_RUN" = false ]; then
			LATEST_VERSION=$(get_latest_version)
			if [ -z "$LATEST_VERSION" ]; then
				echo 'Warning: Could not determine latest version.' >&2
			elif [ "$VERSION" != "$LATEST_VERSION" ]; then
				echo "Notice: DockerX is not up to date, latest version is $LATEST_VERSION!" >&2
			fi
		fi

	else
		echo "v$VERSION"
	fi

	exit 0
fi

if [ "$UPDATE" = true ]; then
	# Update DockerX and exit
	echo 'Error: Update not implemented yet.' >&2
	exit 1
fi

# Get dockerx context path file
if [ -n "$DOCKERX_CONTEXT_FILE" ]; then
	CONTEXT_FILE="$DOCKERX_CONTEXT_FILE"
elif [ -n "$CONTEXT_FILE" ]; then
	CONTEXT_FILE="$CONTEXT_FILE"
elif [ -n "$HOME" ]; then
	CONTEXT_FILE="$HOME/.dockerx"
else
	CONTEXT_FILE='~/.dockerx'
fi

# Get dockerx check parent context flag
CHECK_PARENT_CONTEXT='true'
if [ -n "$DOCKERX_CHECK_PARENT_CONTEXT" ]; then
	CHECK_PARENT_CONTEXT="$DOCKERX_CHECK_PARENT_CONTEXT"
fi

# Get saved context path
if [ -n "$DOCKERX_CONTEXT_PATH" ]; then
	CONTEXT_PATH_SOURCE='ENV'
	CONTEXT_PATH="$DOCKERX_CONTEXT_PATH"
elif [ -n "$CONTEXT_PATH" ]; then
	CONTEXT_PATH_SOURCE='ENV'
	CONTEXT_PATH="$CONTEXT_PATH"
elif [ -f "$CONTEXT_FILE" ]; then
	CONTEXT_PATH_SOURCE='FILE'
	CONTEXT_PATH="$(cat "$CONTEXT_FILE")"
else
	CONTEXT_PATH_SOURCE=''
	CONTEXT_PATH=''
fi

if [ "$CHECK_PARENT_CONTEXT" = 'true' ] &&
	[ -d "$CONTEXT_PATH" ] &&
	echo "$(pwd)" | grep -qv "^$(echo "$CONTEXT_PATH" | sed 's/[\/]\?$//')"
then
	# Context path is not a parent directory of the current directory
	if [ "$CONTEXT_PATH_SOURCE" = 'ENV' ]; then
		echo "Error: Context path '$CONTEXT_PATH' is not a parent directory" >&2
		exit 1
	fi

	# Clear context path
	CONTEXT_PATH_SOURCE=''
	CONTEXT_PATH=''
fi

if [ -z "$CONTEXT_PATH" ] || [ ! -d "$CONTEXT_PATH" ]; then
	if [ "$CONTEXT_PATH_SOURCE" = 'ENV' ]; then
		echo "Error: Context path '$CONTEXT_PATH' not found" >&2
		exit 1
	fi

	if [ "$CONTEXT_PATH_SOURCE" = 'FILE' ]; then
		echo "Warning: Context path '$CONTEXT_PATH' not found, using current directory" >&2
	fi

	CONTEXT_PATH_SOURCE='DEFAULT'
	CONTEXT_PATH="$(pwd)"
fi

if [ "$CONTEXT_GET" = true ]; then
	# Get context path and exit

	if [ -z "$CONTEXT_PATH" ]; then
		echo 'Error: Context path not set' >&2
		exit 1
	fi

	echo "$CONTEXT_PATH"

	if [ "$CONTEXT_PATH_SOURCE" = 'ENV' ]; then
		echo '(from environment variable)' >&2
	elif [ "$CONTEXT_PATH_SOURCE" = 'FILE' ]; then
		echo '(from .dockerx file)' >&2
	elif [ "$CONTEXT_PATH_SOURCE" = 'DEFAULT' ]; then
		echo '(current directory)' >&2
	fi

	exit 0
fi

if [ "$CONTEXT_SET" = true ]; then
	# Set context path and exit

	if [ "$CONTEXT_NEW_PATH" = 'null' ]; then
		# Unset context path
		rm "$CONTEXT_FILE" 2>/dev/null
		echo 'Context path unset'
		exit 0
	fi

	if [ -z "$CONTEXT_NEW_PATH" ]; then
		# Use current directory as context
		CONTEXT_NEW_PATH="$(pwd)"
	fi

	if [ ! -d "$CONTEXT_NEW_PATH" ]; then
		if [ -f "$CONTEXT_NEW_PATH" ]; then
			# Use parent directory as context
			echo "Warning: Using parent directory of '$CONTEXT_NEW_PATH' as context" >&2
			CONTEXT_NEW_PATH=$(dirname "$CONTEXT_NEW_PATH")
		else
			echo "Error: Directory '$CONTEXT_NEW_PATH' not found" >&2
			exit 1
		fi
	fi

	# Use absolute path
	CONTEXT_NEW_PATH=$(cd "$CONTEXT_NEW_PATH" && pwd)

	# Save context path
	echo "$CONTEXT_NEW_PATH" > ~/.dockerx

	# Print context path
	echo "Context path set to: '$CONTEXT_NEW_PATH'"
	echo '(saved in ~/.dockerx)' >&2

	exit 0
fi

# Get image
if [ $# -eq 0 ] || [ -z "$1" ]; then
	echo 'Error: No image specified' >&2
	exit 1
fi

DOCKER_IMAGE="$1"
shift

if [ "$DOCKER_IMAGE" = 'dockerc' ]; then
	# Run dockerc command with following arguments

	# Get arguments
	ARGS=''
	if [ $# -gt 0 ]; then
		for ARG in "$@"; do

			if [ -z "$ARG" ]; then
				# Skip empty arguments
				continue
			fi

			if [ "$(echo "$ARG" | grep "[ '\"\$\`;*&#<>|]")" ]; then
				# Escape argument with spaces or special shell characters
				# Replace single quotes with escaped single quotes
				ARG="'$(echo "$ARG" | sed "s/'/'\"'\"'/g")'"
			fi

			ARGS="$ARGS $ARG"

		done
	fi

	if [ "$QUIET" = false ]; then
		# Print dockerc command
		if [ "$DOCKERX_FIRST_NEWLINE" != 'false' ]; then
			echo ''
		fi
		echo "> cd '$CONTEXT_PATH'"
		echo "> dockerc$ARGS"
		echo ''
	fi

	if [ "$DRY_RUN" = false ]; then
		# Run dockerc command
		export DOCKERC_FIRST_NEWLINE='false'
		exec sh -c "cd \"$CONTEXT_PATH\" && dockerc$ARGS"
	fi

	exit 0
fi

# Get docker options
DOCKER_OPTIONS=''
DOCKER_OPTIONS_COUNT=0
FOUND_DOCKER_OPTIONS=false
if [ $# -gt 0 ]; then
	for ARG in "$@"; do

		if [ -z "$ARG" ]; then
			# Skip empty arguments
			continue
		fi

		if [ "$ARG" = '--' ]; then
			# Found docker options separator
			FOUND_DOCKER_OPTIONS=true
			break
		fi

		if [ "$(echo "$ARG" | grep "[ '\"\$\`;*&#<>|]")" ]; then
			# Escape argument with spaces or special shell characters
			# Replace single quotes with escaped single quotes
			ARG="'$(echo "$ARG" | sed "s/'/'\"'\"'/g")'"
		fi

		DOCKER_OPTIONS="$DOCKER_OPTIONS $ARG"
		DOCKER_OPTIONS_COUNT=$((DOCKER_OPTIONS_COUNT + 1))

	done
fi

if [ "$FOUND_DOCKER_OPTIONS" = true ]; then
	# Docker options found
	while [ $DOCKER_OPTIONS_COUNT -gt 0 ]; do
		# Remove docker options from arguments
		shift
		DOCKER_OPTIONS_COUNT=$((DOCKER_OPTIONS_COUNT - 1))
	done
	# Remove '--' separator from arguments
	shift
else
	# Docker options not found
	# Arguments are commands, not options
	DOCKER_OPTIONS=''
	DOCKER_OPTIONS_COUNT=0
fi

# Prepend DockerX docker options
DOCKER_OPTIONS="-it --rm -v '$CONTEXT_PATH:/workdir' -w /workdir$DOCKER_OPTIONS"

# Get command
PRINT_COMMAND_PRESET_HELP='false'
COMMAND=''
if [ $# -gt 0 ]; then
	# Check for arguments preset
	COMMAND_PRESET=''
	if [ "$1" = '@' ]; then
		PRINT_COMMAND_PRESET_HELP='true'
		shift
	elif [ "$1" = '$' ]; then
		COMMAND_PRESET="@sh"
		shift
	elif [ "$(echo "$1" | cut -c1)" = '@' ]; then
		if [ "$(echo "$1" | cut -c2)" = '@' ]; then
			# Escape command preset
			COMMAND="${1#?}"
			shift
		else
			COMMAND_PRESET="$1"
			shift
		fi
	fi

	if [ -n "$COMMAND_PRESET" ]; then
		# Parse command preset
		case "${COMMAND_PRESET#?}" in

			'sh' )
				COMMAND='sh'
				;;

			*)
				echo "Error: Unknown command preset '$COMMAND_PRESET'" >&2
				exit 1
				;;

		esac
	fi
fi

if [ "$PRINT_COMMAND_PRESET_HELP" = true ]; then
	# Print command presets help and exit
	echo "Use $0 --help for full help"
	echo 'DockerX command presets:'
	echo '  $, @sh  Run a `sh` shell in the container'
	exit 0
fi

if [ -n "$COMMAND" ]; then
	if [ "$(echo "$COMMAND" | grep "[ '\"\$\`;*&#<>|]")" ]; then
		# Escape argument with spaces or special shell characters
		# Replace single quotes with escaped single quotes
		COMMAND="'$(echo "$COMMAND" | sed "s/'/'\"'\"'/g")'"
	fi

	# Add leading space
	COMMAND=" $COMMAND"
fi

# Get arguments
ARGS=''
if [ $# -gt 0 ]; then
	for ARG in "$@"; do

		if [ -z "$ARG" ]; then
			# Skip empty arguments
			continue
		fi

		if [ "$(echo "$ARG" | grep "[ '\"\$\`;*&#<>|]")" ]; then
			# Escape argument with spaces or special shell characters
			# Replace single quotes with escaped single quotes
			ARG="'$(echo "$ARG" | sed "s/'/'\"'\"'/g")'"
		fi

		ARGS="$ARGS $ARG"

	done
fi

if [ "$QUIET" = false ]; then
	# Print docker command
	if [ "$DOCKERX_FIRST_NEWLINE" != 'false' ]; then
		echo ''
	fi
	echo "> docker run $DOCKER_OPTIONS $DOCKER_IMAGE$COMMAND$ARGS"
	echo ''
fi

if [ "$DRY_RUN" = false ]; then
	# Run docker command
	exec sh -c "docker run $DOCKER_OPTIONS $DOCKER_IMAGE$COMMAND$ARGS"
fi

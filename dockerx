#!/bin/sh

# DockerX (v0.1.0)
# Wrapper for running docker programs & docker shell environments.
# https://github.com/matiboux/dockerx
# MIT License
# Copyright (c) 2024 Matiboux

VERSION="0.1.0"

# Default options
PRINT_HELP=false
PRINT_VERSION=false
UPDATE=false
DRY_RUN=false
QUIET=false

# Parse options
while true; do
	case "$1" in
		'--help' | '-h' )
			# Print help
			PRINT_HELP=true
			shift
			;;
		'--version' | '-v' )
			# Print version
			PRINT_VERSION=true
			shift
			;;
		'--update')
			# Update DockerX
			UPDATE=true
			shift
			;;
		'-n')
			# Dry run, print docker command without running it
			DRY_RUN=true
			shift
			;;
		'-q')
			# Quiet, do not print docker command
			QUIET=true
			shift
			;;
		*)
			break
			;;
	esac
done

if [ "$PRINT_HELP" = true ]; then
	# Print help and exit
	echo 'Usage:'
	echo "  $0 [options] <image> [ [...docker_options] -- ] [...command]"
	echo "  $0 [options] <image> [ [...docker_options] -- ] [@preset] [...args]"
	echo "  $0 --set-context [path]"
	echo ''
	echo 'DockerX will run the specified docker image in the context of your'
	echo 'working directory. '
	echo ''
	echo 'Arguments:'
	echo '  options: DockerX options'
	echo '  image: Docker image to run'
	echo '  docker_options: Options passed to docker run command'
	echo '  command: Command to run in the container'
	echo '  @preset: DockerX preset (shortcut for a command)'
	echo '  args: Arguments appended to the preset command'
	echo ''
	echo 'Arguments details:'
	echo '  options:'
	echo '    -h, --help         Print this help and exit'
	echo '    -v, --version      Print version and exit'
	echo '    --update           Update DockerX and exit'
	echo '    -c, --set-context  Set the DockerX context directory'
	echo '    -n             Dry run, print docker command without running it'
	echo '    -q             Quiet, do not print docker command'
	echo '  @preset: One of the following:'
	echo '    $, @sh  Run a `sh` shell in the container'
	exit 0
fi

# Function to get latest version
get_latest_version() {
	# Syntax: '"tag_name": "v1.0.0",'
	LATEST_VERSION_JSON=$(
		curl -fsSL "https://api.github.com/repos/matiboux/dockerx/releases/latest" 2>/dev/null \
		| grep -Eo '"tag_name": "(.+?)",'
	)

	if [ -n "$LATEST_VERSION_JSON" ]; then
		if [ "$(uname -s)" = 'Darwin' ]; then
			# MacOS
			LATEST_VERSION="${LATEST_VERSION_JSON:14:$((${#LATEST_VERSION_JSON}-14-2))}"
		else
			# Linux
			LATEST_VERSION=$(expr substr "$LATEST_VERSION_JSON" $(expr 1 + 14) $(expr length "$LATEST_VERSION_JSON" - 14 - 2))
		fi

		echo "$LATEST_VERSION"
	fi
}

if [ "$PRINT_VERSION" = true ]; then

	# Print version and exit
	if [ "$QUIET" = false ]; then
		echo "DockerX (v$VERSION) - https://github.com/matiboux/dockerx"

		if [ "$DRY_RUN" = false ]; then
			LATEST_VERSION=$(get_latest_version)
			if [ -z "$LATEST_VERSION" ]; then
				echo 'Warning: Could not determine latest version.'
			elif [ "$VERSION" != "$LATEST_VERSION" ]; then
				echo "Notice: DockerX is not up to date, latest version is $LATEST_VERSION!"
			fi
		fi

	else
		echo "v$VERSION"
	fi

	exit 0
fi

if [ "$UPDATE" = true ]; then
	# Update DockerX and exit
	echo 'Error: Update not implemented yet.'
	exit 1
fi
